// src/selection.ts
import { ptr } from "bun:ffi";

// src/ffi.ts
import { dlopen, FFIType, suffix } from "bun:ffi";
var { platform, arch } = process;
var filename;
if (arch === "x64") {
  filename = `../release/promptx-${platform}-amd64.${suffix}`;
} else {
  filename = `../release/promptx-${platform}-${arch}.${suffix}`;
}
var location = new URL(filename, import.meta.url).pathname;
var { symbols } = dlopen(location, {
  CreateSelection: {
    args: [FFIType.ptr, FFIType.ptr, FFIType.ptr, FFIType.int],
    returns: FFIType.ptr
  },
  CreatePrompt: {
    args: [FFIType.ptr, FFIType.ptr, FFIType.ptr, FFIType.ptr, FFIType.bool, FFIType.int],
    returns: FFIType.ptr
  },
  FreeString: {
    args: [FFIType.ptr],
    returns: FFIType.void
  }
});

// src/utils.ts
import { CString } from "bun:ffi";
var utf8e = new TextEncoder();
function encode(data) {
  return utf8e.encode(data + "\0");
}
function toString(ptr3) {
  const str = new CString(ptr3);
  symbols.FreeString(str.ptr);
  return str.toString();
}

// src/selection.ts
function createSelection(items, options = {}) {
  const stringifiedItems = JSON.stringify(items.map((item) => {
    return {
      text: item.text,
      description: item.description || ""
    };
  }));
  const returnedPtr = symbols.CreateSelection(
    ptr(encode(stringifiedItems)),
    ptr(encode(options.headerText || "Select an item: ")),
    ptr(encode(options.footerText || "")),
    options.perPage || 5
  );
  const { selectedIndex, error } = JSON.parse(toString(returnedPtr));
  if (error !== "") {
    return {
      selectedIndex: null,
      error
    };
  }
  return {
    selectedIndex: Number(selectedIndex),
    error: null
  };
}

// src/prompt.ts
import { ptr as ptr2 } from "bun:ffi";
function createPrompt(prompt, options = {}) {
  const returnedPtr = symbols.CreatePrompt(
    ptr2(encode(prompt)),
    ptr2(encode(options.echoMode || "normal")),
    ptr2(encode(options.validateOkPrefix || "")),
    ptr2(encode(options.validateErrPrefix || "")),
    options.required ?? true,
    options.charLimit || 0
  );
  const { value, error } = JSON.parse(toString(returnedPtr));
  if (error !== "") {
    return {
      value: null,
      error
    };
  }
  return {
    value,
    error: null
  };
}
export {
  createPrompt,
  createSelection
};
